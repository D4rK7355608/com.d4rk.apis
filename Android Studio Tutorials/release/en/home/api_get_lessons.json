[
  {
    "id": "1",
    "title": "Start a new project",
    "description": "Learn the base of how to start a new Android Studio project, how to configure, how to set package, API levels and many more…",
    "type": "full_banner",
    "tags": [
      "Android Studio",
      "Beginner",
      "Project Setup"
    ],
    "bannerImageUrl": "https://i.ibb.co/Fz4DqDP/lesson-1-banner.png",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/start_a_new_project"
  },
  {
    "id": "2",
    "title": "History of Android",
    "description": "Learn about the history of Android, from its beta release in 2007 to becoming the world's most popular mobile operating system. Discover the features that make Android unique and the benefits of using Android Studio to develop your apps with Kotlin.",
    "type": "square_image",
    "tags": [
      "Android OS",
      "Android UI",
      "UI Development",
      "Kotlin"
    ],
    "squareImageUrl": "https://i.ibb.co/pnBpw1f/hisotry-of-android.png",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/android_history"
  },
  {
    "id": "3",
    "title": "View binding",
    "description": "New in Android Studio 3.6, view binding gives you the ability to replace findViewById with generated binding objects to simplify code, remove bugs, and avoid all the boilerplate of findViewById.",
    "type": "full_banner",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/view_binding",
    "tags": [
      "Android Studio",
      "View binding",
      "Project Setup",
      "Kotlin"
    ],
    "bannerImageUrl": "https://i.ibb.co/fq3Pqdb/how-to-configure-view-binding-in-android.png"
  },
  {
    "id": "4",
    "title": "Per-app language preferences",
    "description": "Learn how to use per-app languages to make your app more accessible and user-friendly. This feature lets you choose a different language for each app on your device, without the user changing their device language.",
    "type": "full_banner",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/per_app_language_preferences",
    "tags": [
      "Multilingual Support",
      "Accessibility",
      "Project Setup",
      "Kotlin"
    ],
    "bannerImageUrl": "https://i.ibb.co/C74jRtg/per-app-language-preferences.png"
  },
  {
    "id": "5",
    "title": "Predictive back gestures",
    "description": "Android 13 (API level 33) introduces a predictive back gesture for Android devices such as phones, large screens, and foldables. It is part of a multi-year release; when fully implemented, this feature will let users preview the destination or other result of a back gesture before fully completing it, allowing them to decide whether to continue or stay in the current view.",
    "type": "full_banner",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/predictive_back_gesture",
    "tags": [
      "Android 14",
      "Project Setup",
      "XML",
      "Accessibility"
    ],
    "bannerImageUrl": "https://i.ibb.co/P5spN36/predictive-back-gestures-on-android.png"
  },
  {
    "id": "6",
    "title": "How to add a text filed",
    "description": "A user interface element for entering and modifying text. When you define an edit text widget, you must specify the R.styleable.TextView_inputType attribute…",
    "type": "full_banner",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/text_fields",
    "tags": [
      "Kotlin",
      "Java",
      "XML",
      "Beginner"
    ],
    "bannerImageUrl": "https://i.ibb.co/wd5D0W4/how-to-add-text-boxes-in-android.png"
  },
  {
    "id": "7",
    "title": "Mastering Linear Layouts in Android",
    "description": "Learn how to use Linear Layouts to create efficient and adaptable user interfaces in your Android apps. Explore vertical and horizontal orientations, optimize layout performance, and discover best practices for organizing your views.",
    "type": "square_image",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/linear_layouts",
    "tags": [
      "Layout",
      "XML",
      "Beginner"
    ],
    "squareImageUrl": "https://i.ibb.co/Z2P5S8X/linear-layout-in-android.png"
  },
  {
    "id": "8",
    "title": "Relative Layouts in Android",
    "description": "Learn to position UI elements relative to each other or the parent view, creating dynamic and flexible layouts.",
    "type": "square_image",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/relative_layouts",
    "tags": [
      "Layout",
      "Relative Layout",
      "UI",
      "Views"
    ],
    "squareImageUrl": "https://i.ibb.co/6gVYTYM/how-to-use-relative-layouts-in-android.png"
  },
  {
    "id": "9",
    "title": "Table Layouts in Android",
    "description": "Learn how to organize UI elements in rows and columns using TableLayout. While ConstraintLayout is generally preferred for performance, understanding TableLayout can be beneficial for specific use cases.",
    "type": "square_image",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/table_layouts",
    "tags": [
      "Layout",
      "UI",
      "Views",
      "TableLayout",
      "TableRow",
      "Android"
    ],
    "squareImageUrl": "https://i.ibb.co/C20380y/how-to-use-table-layouts-in-android.png"
  },
  {
    "id": "10",
    "title": "Grid View in Android",
    "description": "A grid view is a view group that displays items in a two-dimensional scrolling grid. Grid views are often used to display images, lists, or other types of data in a grid-like format.",
    "type": "square_image",
    "deepLinkPath": "com.d4rk.androidtutorials://lesson/grid_view",
    "tags": [
      "Kotlin",
      "Java",
      "XML",
      "Views",
      "Grid",
      "Android"
    ],
    "squareImageUrl": "https://i.ibb.co/C20380y/how-to-use-table-layouts-in-android.png"
  }
]